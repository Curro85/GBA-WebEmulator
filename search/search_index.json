{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos","text":"<p>Esta es la documentaci\u00f3n de mi proyecto de final de grado.</p> <p>En este proyecto he querido realizar un emulador web de la consola Game Boy Advance que permite tambi\u00e9n a su vez jugar juegos de las dos Game Boy anteriores (Game Boy Color y Game Boy cl\u00e1sica).</p> <p>Realizado por: Alejandro Morillo Troya</p> <p>Curro85/Github</p>"},{"location":"bibliografia/","title":"Bibliograf\u00eda","text":"<p>Muchas gracias por haberte pasado por la documentaci\u00f3n y dedicar tu tiempo a leerla,  dejar\u00e9 por aqu\u00ed enlaces a recursos utilizados para poder desarrollar esta aplicaci\u00f3n,  espero que os anim\u00e9is a realizar un proyecto similar.</p> <p>Un Saludo!</p>"},{"location":"bibliografia/#enlaces","title":"Enlaces","text":"<p>thenick775 mgba</p> <p>Gamepad_API</p> <p>emscripten Filesystem-API</p> <p>https://flask.palletsprojects.com/en/stable/</p> <p>https://vite.dev/guide/</p> <p>https://ai.google.dev/gemini-api/docs</p> <p>https://lucide.dev/guide/packages/lucide-react</p> <p>https://github.com/flasgger/flasgger</p> <p>https://docs.docker.com/</p> <p>https://www.mkdocs.org/</p>"},{"location":"conclusion/","title":"Conclusi\u00f3n","text":"<p>Aqu\u00ed dejar\u00e9 mis conclusiones del proyecto, que trabajo he realizado, los problemas y cambios, y las mejoras que podr\u00eda hacer al proyecto.</p>"},{"location":"conclusion/#trabajo-realizado","title":"Trabajo realizado","text":"<ul> <li> <p>Como se puede observar en la documentaci\u00f3n, he realizado una API en <code>Flask</code>, usando una base de datos PostgreSQL con el ORM SQLAlchemy.</p> </li> <li> <p>Tambi\u00e9n he realizado un frontend con <code>React</code> y <code>Vite</code> para crear una SPA para el emulador, dejando as\u00ed una sola p\u00e1gina con varios componentes cada uno con sus funciones.</p> </li> <li> <p>Por otra parte he aprendido y aplicado <code>TailwindCSS</code>, integrado <code>IA</code> con la API de Google (Gemini) y tambi\u00e9n he aprendido un poco de como compila <code>WebAssembly</code> y las funciones de gesti\u00f3n de ficheros en IndexedDB para navegadores.</p> </li> <li> <p>Por \u00faltimo ambas aplicaciones est\u00e1n dockerizadas, con <code>Nginx</code> para reverse proxy, <code>Certbot</code> para los certificados de Let's Encrypt y as\u00ed tener conexi\u00f3n segura, todo listo para desplegar en plataformas como <code>AWS</code> en una instancia EC2.</p> </li> </ul>"},{"location":"conclusion/#problemas-encontrados","title":"Problemas encontrados","text":"<ul> <li> <p>El primer problema que encontr\u00e9 fue tener un emulador adaptado a <code>JavaScript</code> como m\u00ednimo, ya que sino supondr\u00eda tener que compilar uno por mi cuenta, cosa que no tengo los conocimientos necesarios actualmente. Pero por suerte encontr\u00e9 un emulador de la mano de thenick775 que he usado para mi web.</p> </li> <li> <p>Otro problema que me surgi\u00f3 fue configurar <code>Nginx</code> con headers y MIME types necesarios para poder transmitir ficheros de un tama\u00f1o superior al de por defecto de <code>Nginx</code> y que tambi\u00e9n gestionara los tokens de sesi\u00f3n, pero se pudo solucionar buscando por internet distintos tipos de soluciones (StackOverflow tiene post muy antiguos...).</p> </li> <li> <p>Tambi\u00e9n tuve un problema a la hora de subir ficheros de guardado y ROMs desde navegador a un disco en la instancia de <code>AWS</code>, debido a las rutas que se guardaban en base de datos, esta vez use la documentaci\u00f3n de <code>Flask</code>, ya que tiene una libreria propia para gestionar rutas a ficheros.</p> </li> <li> <p>Por \u00faltimo tuve un problema a la hora de conectar el gamepad y recibir los inputs de forma correcta, por suerte en la documentaci\u00f3n de Gamepad_API ven\u00eda la  soluci\u00f3n a mi problema.</p> </li> </ul>"},{"location":"conclusion/#modificaciones","title":"Modificaciones","text":"<p>El proyecto en principio solo iba a ser el emulador, gesti\u00f3n de usuarios y guardar tus partidas, pero conforme fui realizando el proyecto, fui viendo mas posibilidades de a\u00f1adirle cosas que lo hicieran destacar, como por ejemplo la posibilidad de usar un mando de consola, tener una IA como gu\u00eda de videojuegos y tambi\u00e9n el permitir subir ROMs de juegos.</p>"},{"location":"conclusion/#futuras-mejoras","title":"Futuras mejoras","text":"<p>Como futuras mejoras al proyecto tengo las siguientes:</p> <ul> <li> <p>A\u00f1adir controles para m\u00f3viles y tablets.</p> </li> <li> <p>A\u00f1adir personalizaci\u00f3n de perfiles y categor\u00eda de perfiles.</p> </li> <li> <p>A\u00f1adir temas al emulador, que cambi\u00e9n la interfaz seg\u00fan el tema seleccionado.</p> </li> <li> <p>A\u00f1adir soporte a juego multijugador.</p> </li> <li> <p>Redise\u00f1ar modales para que tengan efectos mas suaves.</p> </li> <li> <p>Mejorar los tiempos de subida y carga de ROMs.</p> </li> </ul> <p>Para abacar te dejo una bibliograf\u00eda en el siguiente apartado para que consultes los recursos utilizados en este proyecto.</p>"},{"location":"emulador/","title":"Emulador GBA","text":"<p>Es el turno del Emulador, en este apartado se mostrar\u00e1 su funcionalidad y como usarlo para jugar a nuestros juegos favoritos.</p>"},{"location":"emulador/#interfaz","title":"Interfaz","text":"<p>Lo primero que ver\u00e1s al entrar en la web, ser\u00e1 una pantalla como esta</p> <p></p> <p>Como ver\u00e1s en la imagen hay varios indicadores num\u00e9ricos:</p> <p>1.- Boton para cargar las ROMs desde el sistema</p> <p>2.- Boton de Play/Pause</p> <p>3.- Controlador de velocidad del emulador (hasta x5!)</p> <p>4.- Controlador de volumen del emulador</p> <p>5.- Estado del emulador, que indica si est\u00e1 el juego o no pausado.</p> <p>6.- Jeremias, nuestro gu\u00eda de videojuegos (modelo utilizado: Gemini de Google)</p> <p>7.- Navbar vertical con opciones para usuarios registrados.</p>"},{"location":"emulador/#primeros-pasos","title":"Primeros pasos","text":"<p>Una vez familiarizados con la interfaz, vamos a explicar como usar el emulador: </p> <p>Para utilizar el emulador la forma m\u00e1s sencilla es arrastrando la rom en la pantalla del emulador, as\u00ed de iniciar\u00e1 y a empezar a jugar.</p> <p></p> <p>Tambi\u00e9n puedes usar el bot\u00f3n de cargar rom y seleccionar una ROM que tengas descargada en tu sistema.</p> <p></p> <p>Una vez se inicie el juego, podr\u00e1s jugar con los controles que se muestran en el modal de configuraci\u00f3n, estos controles son:</p> GBA Teclado Gamepad A X X / A B Z C\u00edrculo / B L S L1 / LB R A R1 / RB Start Enter Start Select Space Select Cruceta \u2190 \u2191 \u2192 \u2193 Cruceta <p>Si usas gamepad, aparte hay a\u00f1adido unos botones con funciones especiales que son los siguientes:</p> <ul> <li>LT / RT o L2 / R2: Bajar y subir la velocidad de emulaci\u00f3n.</li> <li>RS o R3: Reiniciar el emulador con el juego actual. (Por si quieres capturar shinys en pokemon).</li> </ul>"},{"location":"emulador/#conoce-a-jeremias","title":"Conoce a Jerem\u00edas","text":"<p>Jerem\u00edas es nuestro asistente IA para guiarnos en los videojuegos, por si nos atascamos en alg\u00fan nivel o no sabemos como ajustar mejor a nuestro personaje en Golden Sun, Jerem\u00edas estar\u00e1 ahi para ayudarte.</p> <p></p>"},{"location":"emulador/#sube-tus-roms-para-jugar-donde-quieras","title":"Sube tus roms para jugar donde quieras","text":"<p>Los usuarios registrados tienen la opci\u00f3n de guardar sus roms y partidas guardadas en la nube, para poder  acceder a sus juegos desde cualquier lugar.</p> <p>Para subir una rom es tan sencillo como usar el bot\u00f3n subir roms del navbar, y cuando se abra el modal seleccionar  aquellos juegos que queremos subir y si queremos subir sus datos de guardado o no.</p> <p></p> <p>Para jugar a una rom desde la nube es tambi\u00e9n f\u00e1cil, simplemente selecciona el bot\u00f3n mis roms del navbar, luego selecciona la rom y selecciona si quieres iniciar una nueva partida o una partida guardada anteriormente.</p> <p></p>"},{"location":"emulador/#hasta-pronto","title":"\u00a1Hasta pronto!","text":"<p>Hasta aqu\u00ed la documentaci\u00f3n, en el siguiente apartado estan las conclusiones del proyecto.</p>"},{"location":"gba-api/","title":"API: Flask","text":"<p>Vamos a explicar en profundidad la API creada en flask con sus ficheros m\u00e1s importantes \u00bfRecuerdas la estructura del apartado anterior?</p> <pre><code>gba-api/\n|-- docs/\n|-- Dockerfile\n|-- app.py\n|-- config.py\n|-- models.py\n|-- requirements.txt\n|-- utils.py\n|-- validators.py\ngba-front/\n|-- public/\n|-- src/\n|-- Dockerfile\n|-- eslint.config.js\n|-- index.html\n|-- package-lock.json\n|-- package.json\n|-- vite.config.js\nREADME.md\ndocker-compose.yml\n</code></pre> <p>Vamos a centrarnos ahora en esta parte:</p> <pre><code>gba-api/\n|-- docs/\n|-- Dockerfile\n|-- app.py\n|-- config.py\n|-- models.py\n|-- requirements.txt\n|-- utils.py\n|-- validators.py\n</code></pre>"},{"location":"gba-api/#ficheros-y-directorios-utiles","title":"Ficheros y directorios \u00fatiles","text":"<p>Estos consisten en el directorio <code>docs/</code> y los ficheros <code>Dockerfile</code> y <code>requirements.txt</code>.</p> <p>Los ficheros contienen la configuraci\u00f3n necesaria para dockerizar la aplicaci\u00f3n y desplegar en AWS a trav\u00e9s de actions de github.</p> <p>El directorio docs contiene los YML necesarios para documentar la API en <code>Swagger</code>.</p>"},{"location":"gba-api/#validadores-y-utilidades-validatorspy-utilspy","title":"Validadores y utilidades (<code>validators.py / utils.py</code>)","text":"<p>En estos ficheros he creado funciones auxiliares para la aplicaci\u00f3n evitando as\u00ed repetir c\u00f3digo y tener funciones que pueden reutilizarse.</p> <p><code>utils.py</code></p> <pre><code># Verifica que los ficheros cargados al emulador tengan la extensi\u00f3n correcta\ndef allowed_file(filename):\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in {\n        \"gba\",\n        \"gbc\",\n        \"gb\",\n    }\n\n\n# Crea los directorios del usuario si no existen para almacenar sus juegos\ndef create_user_directories(user_id):\n    base_dir = Config.ROM_FOLDER\n    dirs = [\n        os.path.join(base_dir, str(user_id)),\n        os.path.join(base_dir, str(user_id), \"roms\"),\n        os.path.join(base_dir, str(user_id), \"saves\"),\n    ]\n\n    for directory in dirs:\n        os.makedirs(directory, exist_ok=True)\n</code></pre> <p><code>validators.py</code></p> <pre><code># Validaci\u00f3n general de contrase\u00f1a para que cumpla con los est\u00e1ndares actuales\ndef validate_password(password):\n    if len(password) &lt; 8:\n        return \"La contrase\u00f1a debe tener al menos 8 caract\u00e9res.\"\n    if not any(char.isupper() for char in password):\n        return \"La contrase\u00f1a debe incluir al menos una letra may\u00fascula.\"\n    if not any(char.islower() for char in password):\n        return \"La contrase\u00f1a debe incluir al menos una letra min\u00fascula.\"\n    if not any(char.isdigit() for char in password):\n        return \"La contrase\u00f1a debe incluir al menos un n\u00famero.\"\n    if not any(char in string.punctuation for char in password):\n        return \"La contrase\u00f1a debe incluir al menos un car\u00e1cter especial.\"\n    return None\n</code></pre>"},{"location":"gba-api/#modelos-de-base-de-datos-modelspy","title":"Modelos de base de datos (<code>models.py</code>)","text":"<p>Aqu\u00ed est\u00e1n los modelos usados en la aplicaci\u00f3n con el ORM <code>SQLAlchemy</code>, he a\u00f1adido \u00edndices a los campos m\u00e1s accedidos para as\u00ed tener mayor velocidad en las peticiones.</p> <pre><code>class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)\n    register_date = db.Column(db.DateTime, default=datetime.now)\n    profile = db.relationship(\n        \"Profile\", uselist=False, back_populates=\"user\", cascade=\"all, delete-orphan\"\n    )\n    roms = db.relationship(\"Rom\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    saves = db.relationship(\"Save\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n\n\nclass Profile(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    bio = db.Column(db.String(200), nullable=False)\n    image = db.Column(db.String(255), nullable=False, default=\"default.jpg\")\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), index=True)\n    user = db.relationship(\"User\", back_populates=\"profile\")\n\n\nclass Rom(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(256), nullable=False)\n    hash = db.Column(db.String(64), nullable=False, index=True)\n    size = db.Column(db.Integer, nullable=False)\n    path = db.Column(db.String(512), nullable=False)\n    upload_date = db.Column(db.DateTime, default=datetime.now)\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), index=True)\n    user = db.relationship(\"User\", back_populates=\"roms\")\n    saves = db.relationship(\"Save\", back_populates=\"rom\")\n\n\nclass Save(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(256), nullable=False)\n    size = db.Column(db.Integer, nullable=False)\n    path = db.Column(db.String(512), nullable=False)\n    upload_date = db.Column(db.DateTime, default=datetime.now)\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), index=True)\n    rom_id = db.Column(db.Integer, db.ForeignKey(\"rom.id\"), index=True)\n    user = db.relationship(\"User\", back_populates=\"saves\")\n    rom = db.relationship(\"Rom\", back_populates=\"saves\")\n</code></pre>"},{"location":"gba-api/#configuracion-configpy","title":"Configuraci\u00f3n (<code>config.py</code>)","text":"<p>En este fichero tengo la configuraci\u00f3n de la aplicaci\u00f3n como la <code>SECRET_KEY</code>, protegidas por variables de entorno para m\u00e1s seguridad.</p> <pre><code>class Config:\n    JWT_SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\")\n    JWT_TOKEN_LOCATION = [\"cookies\"]\n    JWT_COOKIE_HTTPONLY = True\n    JWT_COOKIE_SECURE = True\n    JWT_COOKIE_SAMESITE = \"Lax\"\n    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)\n    JWT_COOKIE_DOMAIN = os.getenv(\"JWT_COOKIE_DOMAIN\")\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"DB_URL\")\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    ROM_FOLDER = os.path.join(os.getcwd(), \"uploads\", \"users\")\n    GEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\n</code></pre>"},{"location":"gba-api/#api-apppy","title":"API (<code>app.py</code>)","text":"<p>En este fichero est\u00e1n todos los endpoints de la API, en la siguiente tabla se muestra un resumen de cada uno, si quiere ver el c\u00f3digo, cada endpoint tiene un enlace a su respectiva l\u00ednea dentro del c\u00f3digo.</p> Endpoint M\u00e9todo Par\u00e1metros Return /gemini POST String: mensaje del usuario String: respuesta de la IA /api/register POST String: usuarioString:Contrase\u00f1a String: Usuario registrado /api/login POST String: usuarioString:contrase\u00f1a String: Login exitoso /api/logout POST - - /api/profile GET Token JWT JSON: Datos del usuario /api/uploadroms POST Token JWTROMsSaves String: ROMs subidos /api/loadroms GET Token JWT JSON: Lista de ROMs del usuario /api/loadrom/string:rom_hash GET Token JWTString: Hash de la ROM ROM seleccionada /api/deleterom/string:rom_hash DELETE Token JWTString: Hash de la ROM String: ROM eliminada /api/loadsaves/string:rom_hash GET Token JWTString: Hash de la ROM JSON: 3 \u00faltimos Saves de la ROM /api/loadsave/int:save_id GET Token JWTInt: ID del Save Save seleccionado <p>En el siguiente apartado explicaremos m\u00e1s sobre el Frontend.</p>"},{"location":"gba-front/","title":"Frontend: React con Vite","text":"<p>Ahora es el momento del Frontend, as\u00ed que explicar\u00e9 la estructura y partes m\u00e1s importantes del mismo.</p> <pre><code>gba-front/\n|-- public/\n|-- src/\n    |-- assets/\n    |-- components/\n    |-- context/\n    |-- App.css\n    |-- App.jsx\n    |-- index.css\n    |-- main.jsx\n|-- Dockerfile\n|-- eslint.config.js\n|-- index.html\n|-- package-lock.json\n|-- package.json\n|-- vite.config.js\n</code></pre>"},{"location":"gba-front/#ficheros-y-directorios-utiles","title":"Ficheros y directorios \u00fatiles","text":"<p>Tenemos el directorio <code>public/</code> que es el encargado dar acceso a los ficheros est\u00e1ticos a react de forma predeterminada.</p> <p>Tambi\u00e9n tenemos el ya conocido <code>Dockerfile</code>, para contenedorizar y desplegar la aplicaci\u00f3n.</p> <p>En <code>React</code> tambi\u00e9n tenemos varios ficheros como <code>eslint.config.js</code> y <code>vite.config.js</code>, que contienen configuraci\u00f3n del proyecto, y tambi\u00e9n tenemos los ficheros <code>package.json</code> y <code>package-lock.json</code> que tienen las dependencias y librerias instaladas en el proyecto.</p> <p>Por \u00faltimo tenemos <code>index.html</code>, que es el HTML principal que se muestra al cargar nuestra aplicaci\u00f3n.</p>"},{"location":"gba-front/#directorio-src","title":"Directorio <code>src/</code>","text":"<p>Aqu\u00ed es donde realmente destaca <code>React</code>, aunque antes de ir a lo principal, explicar\u00e9 los ficheros y las carpetas m\u00e1s secundarias.</p> <p>Esto consta de lo siguiente:</p> <ul> <li>assets/: Carpeta que contiene im\u00e1genes y ficheros, similar al directorio <code>public/</code>, pero   solo accesible dentro de la misma.</li> <li>App.css e index.css: Ficheros de estilo para la aplicaci\u00f3n que actualmente uso TailwindCSS.</li> <li>App.jsx: En este fichero se insertan los componentes creados para mostrarlos en la web.</li> <li>main.jsx: Este es el fichero principal de react, el que muestra el <code>index.html</code>   mencionado anteriormente, e incluye <code>app.jsx</code> m\u00e1s los contextos creados.</li> </ul>"},{"location":"gba-front/#directorio-context","title":"Directorio <code>context/</code>","text":"<p>En este directorio se crean contextos que sirven para crear funciones, variables reactivas y utilidades que se transmiten a los componentes, para tener un c\u00f3digo reutilizable y m\u00e1s f\u00e1cil de mantener y leer.</p> <pre><code>gba-front/\n|-- public/\n|-- src/\n    |-- context/\n      |-- auth.context.jsx\n      |-- emulator.context.jsx\n      |-- gamepad.context.jsx\n      |-- modal.context.jsx\n</code></pre> <p>Estos son los contextos creados:</p> <p>auth.context.jsx <sub><sup>(ver)</sup></sub></p> <p>Este contexto contiene las funciones de registro, login, logout y todo lo necesario para gestionar los usuarios de la web.</p> <p>emulator.context.jsx <sub><sup>(ver)</sup></sub></p> <p>Este contexto crea y entrega el emulador a los dem\u00e1s componentes, con funciones propias del mismo y algunas  creadas por m\u00ed para ajustarlas a mi idea de la web.</p> <p>gamepad.context.jsx <sub><sup>(ver)</sup></sub></p> <p>Este contexto contiene las funciones y el bucle que recibe los inputs del mando conectado al ordenador  permitiendo jugar al emulador con un mando conectado.</p> <p>modal.context.jsx <sub><sup>(ver)</sup></sub></p> <p>Este contexto se encarga de gestionar los modales de la web, de sus animaciones y de abrirlos y cerrarlos.</p>"},{"location":"gba-front/#directorio-components","title":"Directorio <code>components/</code>","text":"<p>Dentro de components, crearemos los componentes que usaremos en la web, como si fuesen piezas de un puzzle que luego vamos a colocar.</p> <pre><code>gba-front/\n|-- public/\n|-- src/\n    |-- components/\n      |-- Emulator.jsx\n      |-- Gemini.jsx\n      |-- LoginForm.jsx\n      |-- Navbar.jsx\n      |-- Profile.jsx\n      |-- RegisterForm.jsx\n      |-- RomList.jsx\n      |-- Settings.jsx\n      |-- UserRoms.jsx\n</code></pre> <p>Estos son los componentes actuales de la web:</p> <p>Emulator.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente muestra en pantalla el emulador con unos controladores para la velocidad, el volumen, un bot\u00f3n para cargar las roms y otro para reproducir/pausar la emulaci\u00f3n.</p> <p>Gemini.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente se encarga de mostrar la IA introducida como gu\u00eda de videojuegos, saludad a Jerem\u00edas.</p> <p>Navbar.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente contiene los modales que el usuario puede utilizar, como login, perfil, subir roms...</p> <p>RomList.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal \"Subir roms\", sirve para listar y subir las roms que el usuario escoja.</p> <p>UserRoms.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal \"Mis roms\" y muestra las roms que el usuario tiene en base de datos pudiendo acceder a ellas e iniciar el juego que quiera desde la nube.</p> <p>Profile.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal de \"Perfil\" y muestra datos y estad\u00edsticas del usuario.</p> <p>Settings.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal \"Configuraci\u00f3n\" y actualmente muestra los controles del emulador.</p> <p>LoginForm.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal de \"Iniciar sesi\u00f3n\" permite iniciar sesi\u00f3n en la web.</p> <p>RegisterForm.jsx <sub><sup>(ver)</sup></sub></p> <p>Este componente est\u00e1 dentro del modal de \"Registro\" y sirve para registrar a nuevos usuarios en la web.</p> <p>En el siguiente apartado, lleg\u00f3 el momento, explicaremos el Emulador.</p>"},{"location":"introduccion/","title":"Introducci\u00f3n","text":"<p>El objetivo de este proyecto es desarrollar un emulador web de Game Boy Advance (GBA) que permite a los usuarios jugar a sus juegos directamente en navegador, sin necesidad de configuraciones excesivas.</p>"},{"location":"introduccion/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Emulador GBA: Compilado a WebAssembly   por thenick775.</li> <li>API: Realizada con <code>Flask</code>, con endpoints para gestionar las ROMs,   partidas guardadas y usuarios.</li> <li>Frontend: Realizado con <code>React</code> y <code>Vite</code> con la intenci\u00f3n de crear una SPA   moderna y f\u00e1cil de usar.</li> <li>Reverse-proxy: Usando <code>Nginx</code> con SSL.</li> <li>Gemini: Inteligencia artificial con <code>Gemini</code> de <code>Google</code>.</li> <li>Despliegue: Realizado en la plataforma <code>AWS</code>, con contenedores <code>Docker</code>.</li> </ul>"},{"location":"introduccion/#tecnologias-utilizadas","title":"Tecnolog\u00edas utilizadas","text":"<p>En este proyecto he utilizado las siguientes tecnolog\u00edas:</p> <ul> <li>Flask: Con la idea de crear una API con los recursos justos y necesarios para mejor   rendimiento en la web.</li> <li>React + Vite: Como quiero mantener el foco en el emulador, la idea de una SPA me parec\u00eda   la mas correcta, por eso he utilizado React para mantener funcionalidades de forma as\u00edncrona   sin necesidad de usar p\u00e1ginas adicionales.</li> <li>IA: Con Gemini he introducido inteligencia artificial como gu\u00eda de videojuegos.</li> <li>Docker: Con docker he podido contenedorizar la aplicaci\u00f3n para desplegarlo en servicios   serverless como AWS pudiendo automatizar el proceso.</li> <li>Nginx: Con Nginx junto a Let's Encrypt conseguimos tener un proxy inverso que redirige   siempre a HTTPS para tener conexi\u00f3n segura.</li> <li>TailwindCSS: Para el dise\u00f1o he usado Tailwind que es un framework similar a Bootstrap   pero que permite mucha mas personalizaci\u00f3n.</li> <li>AWS: A trav\u00e9s de una instancia EC2 que contiene el proyecto en una imagen docker realizo   el \u00faltimo paso para tener la aplicaci\u00f3n desplegada y servida por un dominio web.</li> </ul>"},{"location":"introduccion/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<p>La estructura del proyecto consiste en dos aplicaciones, <code>gba-api</code> que es la API en <code>Flask</code> y <code>gba-front</code>, que es el frontend en <code>React con Vite</code>.</p> <pre><code>gba-api/\n|-- docs/\n|-- Dockerfile\n|-- app.py\n|-- config.py\n|-- models.py\n|-- requirements.txt\n|-- utils.py\n|-- validators.py\ngba-front/\n|-- public/\n|-- src/\n|-- Dockerfile\n|-- eslint.config.js\n|-- index.html\n|-- package-lock.json\n|-- package.json\n|-- vite.config.js\nREADME.md\ndocker-compose.yml\n</code></pre> <p>En el siguiente apartado profundizaremos en la API.</p>"}]}